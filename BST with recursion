import java.util.*;
public class BST
{
    static class Node
    {
        int data;
        Node left;
        Node right;
        Node(int data)
        {
            this.data=data;
        }   
    }
    public static Node insert(Node root,int value)
    {
        if (root==null)
        {
            root = new Node (value);
            return root;
        }
        if(value<root.data)
        {
            root.left=insert(root.left,value);
        }
        else{
            root.right=insert(root.right,value);
        }
        return root;
    }
    public static void inorder(Node root)
    {
        if(root==null)
        {
            return;
        }
            inorder(root.left);
            System.out.println(root.data);
            inorder(root.right);
    }
    public static boolean search(Node root,int value)
    {
        if(root==null)
        {
            return false;
        }
        else if(root.data==value)
        {
            return true;
        }
        else if(value<root.data)
        {
            return search(root.left,value);
        }
        else
        {
            return search(root.right,value);
        }
    }
    public static Node delete(Node root, int val)
    {
        if(root.data>val)
        {
            root.left= delete(root.left,val);
        }
        else if(root.data<val)
        {
            root.right = delete(root.right,val);
        }
        else
        {
            // Node without children
            if(root.left==null && root.right==null)
            {
                return null;
            }
            //Node with single child
            if(root.left==null)
            {
                return root.right;
            }
            if(root.right==null)
            {
                return root.left;
            }
            //Node with both children
              Node IS= inordersuccessor(root.right);
              root.data=IS.data;
              delete(root.right,IS.data);
        }
        return root;
        }
        public static Node inordersuccessor(Node  root)
        {
            while(root.left!=null)
            {
                root=root.left;
            }
            return root;
        }
        //print Nodes that are in the given Range
        public static void inRange(Node root,int X,int Y)
        {
            if(root==null)
            {
                return;
            }
            if(root.data>=X && root.data<=Y)
            {
                inRange(root.left,X,Y);
                System.out.print(root.data+" ");
                inRange(root.right,X,Y);
                System.out.println();
            }
            else if(root.data>Y)
            {
                inRange(root.left,X,Y);
            }
            else
            {
                inRange(root.right,X,Y);
            }
        }
        //printing root to leaf paths
        public static void printpath(ArrayList<Integer> path)
        {
            for(int i=0;i<path.size();i++)
            {
                System.out.print(path.get(i)+" ");
            }
            System.out.println();
        }
        public static void root2leaf(Node root,ArrayList<Integer> path)
        {
            if(root==null)
            {
               return; 
            }
            path.add(root.data);
            if(root.left==null && root.right==null)
            {
                printpath(path);
            }
            else
            {
                root2leaf(root.left,path);
                root2leaf(root.right,path);
            }
            path.remove(path.size()-1);
        }
        public static void levelorder(Node root)
        {
            if(root==null)
            {
                return;
            }
            Queue<Node> q = new LinkedList<>();
            q.add(root);
            q.add(null);
            while(!q.isEmpty())
            {
                Node currnode = q.remove();
                if(currnode == null)
                {
                    System.out.println();
                if(q.isEmpty())
                {
                    break;
                }
                else
            {
                q.add(null);
            }
        }
        else{
            System.out.print(currnode.data+ " ");
            if(currnode.left!=null)
            {
                q.add(currnode.left);
            }
            if(currnode.right!=null)
            {
                q.add(currnode.right);
            }
        }
            }
    }
    public  static int countNodes(Node root)
    {
        if(root==null)
        {
            return 0;
        }
        int leftnodes= countNodes(root.left);
        int rightnodes=countNodes(root.right);
         return leftnodes + rightnodes +1;
    }
    // Calculate the Sum of Nodes
    public  static int sumNodes(Node root)
    {
        if(root==null)
        {
            return 0;
        }
        int leftnodes= sumNodes(root.left);
        int rightnodes=sumNodes(root.right);
         return leftnodes + rightnodes +root.data;
    }
 //Calculate Height of the Tree
 public static int calcheight(Node root)
 {
    if(root==null)
    {
        return 0;
    }
    int leftheight = calcheight(root.left);
    int rightheight = calcheight(root.right);
    int myheight=   Math.max(leftheight,rightheight)+1;

    return myheight;
 }
 //Subtree of another subtree
// public boolean isSubtree(Node root,Node subroot)
// {

// }
    public static void main(String args[])
    {
        int values[]={4,3,5,2,1,7};
        Node root= null;
        for(int i=0;i<values.length;i++)
        {
           root= insert(root,values[i]);  
        }
        // inorder(root);
        // if(search(root,10)==true)
        // {
        //     System.out.println("Element found.");
        // }
        // else
        // {
        //     System.out.println("Element not found.");
        // }
        // delete(root, 4);
        // inorder(root);
        // inRange(root,3,6);
        // ArrayList<Integer> path = new ArrayList<>();
        // root2leaf(root,path);
        // levelorder(root);
        int t=countNodes(root);
        System.out.println(t);
        int p=sumNodes(root);
        System.out.println(p);
    }
}
